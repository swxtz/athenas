// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}

model User {
  id   String @id @default(cuid())
  name String

  email              String    @unique
  emailVerified      Boolean   @default(false) @map("email_verified")
  emailVerificatedAt DateTime? @map("email_verificated_at")
  password           String

  userType UserType @default(consumer) @map("user_type")

  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")
  UserPurchases        UserPurchases[]
  ShoppingCart         ShoppingCart[]
  BuyOrder             BuyOrder[]
  paymentNotifications PaymentNotification[]
  UserAdress           UserAdress[]

  @@map("users")
}

enum UserType {
  consumer
  admim
}

model UserAdress {
  id     String @id @default(cuid())
  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  street       String @map("street")
  houseNumber  Int    @map("house_number")
  neighborhood String @map("neighborhood")
  city         String @map("city")
  state        String @map("state")
  complement   String @map("complement")
  apartment    Int    @map("apartment")
  apBlock      Int    @map("ap_block")
}

model Product {
  id String @id @default(uuid())

  name        String  @unique
  description String
  slug        String  @unique
  buyPrice    Int     @map("buy_price")
  price       Int
  stock       Int
  barcode     String?
  sku         String?
  isAvailable Boolean @default(true) @map("is_available")
  rating      Float?  @map("rating")

  isDeleted Boolean   @default(false) @map("is_deleted")
  deletedAt DateTime? @map("deleted_at")

  coverImage String?  @map("cover_image")
  images     String[]

  productType ProductType @default(others) @map("product_type")

  state ProductState @default(available)

  localPickup Boolean @default(false) @map("local_pickup")
  //storeAvailables 

  //metrics
  numberOfSales           Int @default(0) @map("number_of_sales")
  numberOfViews           Int @default(0) @map("number_of_views")
  numberOfViewsInLastWeek Int @default(0) @map("number_of_views_in_last_week")

  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  Promotion        Promotion[]
  UserPurchases    UserPurchases?
  Recommendation   Recommendation?
  recommendationId String?

  Category            Category[]
  BuyOrderProducts    BuyOrderProducts[]
  ShoppingCartProduct ShoppingCartProduct[]

  @@map("products")
}

model Promotion {
  id        String @id @default(cuid())
  productId String @unique @map("product_id")

  product Product @relation(fields: [productId], references: [id])

  isPromotion        Boolean   @default(false) @map("is_promotion")
  promotionPrice     Int?      @map("promotion_price")
  promotionStart     DateTime? @map("promotion_start")
  promotionEnd       DateTime? @map("promotion_end")
  lastPromotion      DateTime? @map("last_promotion")
  promotionCreatedAt DateTime? @map("promotion_created_at")
  promotionCreatorId String?   @map("promotion_creator_id")
  promotionOwner     String?

  @@map("promotions")
}

enum ProductType {
  bread
  hamburger
  others
}

enum ProductState {
  available
  unavailable
  outOfStock
}

// recomendation engine
model Recommendation {
  id String @id @default(uuid())

  // foremkey
  productId String  @unique @map("product_id")
  product   Product @relation(fields: [productId], references: [id])

  //base values 
  score               Float @default(500)
  weeklyRecomendation Float @default(500) @map("weekly_recomendation")
  dailyRecomendation  Float @default(500) @map("daily_recomendation")

  // recomedation values

  // views
  views       Float @default(0)
  weeklyViews Float @default(0) @map("weekly_views")
  dailyViews  Float @default(0) @map("daily_views")

  // likes
  likes       Float @default(0)
  weeklyLikes Float @default(0) @map("weekly_likes")
  dailyLikes  Float @default(0) @map("daily_likes")

  // sales 
  sales       Float @default(0)
  weeklySales Float @default(0) @map("weekly_sales")
  dailySales  Float @default(0) @map("daily_sales")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("recommendations")
}

// 
model UserPurchases {
  id String @id @default(uuid())

  productId String  @unique @map("product_id")
  product   Product @relation(fields: [productId], references: [id])
  userId    String  @map("user_id")
  user      User    @relation(fields: [userId], references: [id])

  productSlug  String @map("product_slug")
  productValue Int    @map("product_values")
  productName  String @map("product_name")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_purchases")
}

model ShoppingCart {
  id String @id @default(uuid())

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  ShoppingCartProduct ShoppingCartProduct[]

  @@map("shopping_cart")
}

model ShoppingCartProduct {
  id String @id @default(uuid())

  shoppingCartId String       @map("shopping_cart_id")
  shoppingCart   ShoppingCart @relation(fields: [shoppingCartId], references: [id])
  productId      String       @map("product_id")
  product        Product      @relation(fields: [productId], references: [id])
  amount         Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Category {
  id String @id @default(cuid())

  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])
  type      String

  @@map("categories")
}

// OrderBuy
model BuyOrder {
  id String @id @default(uuid())

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  paymentMethod PaymentMethod @map("payment_method")
  paymentStatus PaymentStatus @map("payment_status")

  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  BuyOrderProducts    BuyOrderProducts[]
  paymentNotification PaymentNotification?

  @@map("buy_orders")
}

enum PaymentMethod {
  creditCard
  debitCard
  cash
  pix
  boleto
}

enum PaymentStatus {
  pending
  paid
  canceled
}

model BuyOrderProducts {
  id String @id @default(cuid())

  buyOrderId String   @map("buy_order_id")
  buyOrder   BuyOrder @relation(fields: [buyOrderId], references: [id])

  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("buy_order_products")
}

model PaymentNotification {
  id String @id @default(cuid())

  user     User     @relation(fields: [userId], references: [id])
  buyOrder BuyOrder @relation(fields: [buyOrderId], references: [id])

  userId     String @map("user_id")
  buyOrderId String @unique @map("buy_order_id")

  status PaymentNotificationStatus @default(Pending)

  message String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("payment_notifications")
}

enum PaymentNotificationStatus {
  Done
  Failed
  Pending
  Refunded
  Processing
}
